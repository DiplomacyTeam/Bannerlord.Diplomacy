name: Build

on:
  push:
    branches:
      - main

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:

  build:
    name: Build for NexusMods (Stable)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: 5.0.x

    - name: Build Diplomacy Module
      run: |
        $impl = $PWD.Path + '/bannerlord-implementations';
        $path = $PWD.Path + '/bannerlord';
        $final = $path + '/Modules/Bannerlord.Diplomacy/bin/Win64_Shipping_Client/';
        $proj = 'src/Bannerlord.Diplomacy/Bannerlord.Diplomacy.csproj';
        $pdll = $path + '/Modules/Bannerlord.Diplomacy/bin/Win64_Shipping_Client/Bannerlord.Diplomacy*.dll';
        $ppdb = $path + '/Modules/Bannerlord.Diplomacy/bin/Win64_Shipping_Client/Bannerlord.Diplomacy*.pdb';
        # The folders are required to be created before executing the script
        New-Item -ItemType directory -Force -Path $impl;
        New-Item -ItemType directory -Force -Path $path;
        $gameversions = Get-Content -Path supported-game-versions.txt;
        # Process all implementations
        For ($i = 0; $i -le $gameversions.Length - 1; $i++)
        {
            $gameversion = $gameversions[$i];
            $version = $gameversion.substring(1);
            $constgameversion = $gameversion.replace(".", "");
            dotnet clean $proj --configuration Release;
            dotnet build $proj --configuration Release -p:OverrideGameVersion=$gameversion -p:GameFolder="$path" -p:ConstGameVersionWithPrefix="$constgameversion";
            # Copy Implementations to the Implementations folder
            Copy-Item $pdll $impl/;
            Copy-Item $ppdb $impl/;
        }
        # Copy Implementations to the Module
        Copy-Item $impl/* $final;
        # Delete Implementations folder
        Remove-Item -Recurse $impl;
      shell: pwsh

    - name: Upload bannerlord folder
      uses: actions/upload-artifact@v2
      with:
        name: Bannerlord.Diplomacy
        path: ./bannerlord/Modules/
        
###########################
#         GITHUB          #
###########################
  publish-on-github:
    name: Publish on GitHub
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Setup
      uses: butr/actions-common-setup@v2.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}

    - name: Download stable bannerlord folder
      uses: actions/download-artifact@v2
      with:
        name: Bannerlord.Diplomacy
        path: ./bannerlord/Modules/

    - name: Zip Bannerlord.Diplomacy
      run: 7z a -t7z Bannerlord.Diplomacy.7z ./bannerlord/* -mx9
      #shell: pwsh
      # pwsh casues it to include the root folder

    - name: Install Bannerlord.ChangelogParser and Bannerlord.NexusmodsUploader
      run: >-
        dotnet tool install -g Bannerlord.ChangelogParser;
        dotnet tool install -g Bannerlord.NexusmodsUploader;
      shell: pwsh

    - name: Run ChangelogParser
      id: changelog
      run: |
        vers="$(bannerlord_changelog_parser latestversion -f "$PWD/changelog.txt")"
        echo "::set-output name=mod_version::$vers"
        desc="$(bannerlord_changelog_parser fulldescription -f "$PWD/changelog.txt")"
        desc="${desc//'%'/'%25'}"
        desc="${desc//$'\n'/'%0A'}"
        desc="${desc//$'\r'/'%0D'}"
        echo "::set-output name=mod_description::$desc"
      shell: bash

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      with:
        tag_name: v${{steps.changelog.outputs.mod_version}}
        release_name: Release ${{steps.changelog.outputs.mod_version}}
        body: ${{steps.changelog.outputs.mod_description}}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ./Bannerlord.Diplomacy.7z
        asset_name: Bannerlord.Diplomacy.7z
        asset_content_type: application/x-7z-compressed
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}        
